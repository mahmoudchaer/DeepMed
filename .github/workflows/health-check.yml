name: Docker Services Health Check

on:
  # Run on schedule
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours
  
  # Run on push to main branch (no path restrictions)
  push:
    branches: 
      - main
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      timeout:
        description: 'Request timeout in seconds'
        required: false
        default: '15'
        type: string

jobs:
  health-check:
    name: Check Docker Services Health
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
      - name: Create health check script on server
        run: |
          # Create a temporary script to run on the remote server
          cat << 'EOF' > remote_health_check.sh
          #!/bin/bash
          
          echo "Running health checks on $(hostname)..."
          
          # Create a services.json file with all service endpoints
          cat << 'SERVICES_EOF' > services.json
          {
            "Tabular Data Services": {
              "Data Cleaner": {"url": "http://localhost:5001", "endpoint": "/health"},
              "Feature Selector": {"url": "http://localhost:5002", "endpoint": "/health"},
              "Anomaly Detector": {"url": "http://localhost:5003", "endpoint": "/health"},
              "Model Trainer": {"url": "http://localhost:5004", "endpoint": "/health"},
              "Medical Assistant": {"url": "http://localhost:5005", "endpoint": "/health"},
              "Model Coordinator": {"url": "http://localhost:5020", "endpoint": "/health"},
              "Logistic Regression": {"url": "http://localhost:5010", "endpoint": "/health"},
              "Decision Tree": {"url": "http://localhost:5011", "endpoint": "/health"},
              "Random Forest": {"url": "http://localhost:5012", "endpoint": "/health"},
              "SVM": {"url": "http://localhost:5013", "endpoint": "/health"},
              "KNN": {"url": "http://localhost:5014", "endpoint": "/health"},
              "Naive Bayes": {"url": "http://localhost:5015", "endpoint": "/health"},
              "Tabular Predictor": {"url": "http://localhost:5101", "endpoint": "/health"}
            },
            "Image Processing Services": {
              "Pipeline Service": {"url": "http://localhost:5025", "endpoint": "/health"},
              "Augmentation Service": {"url": "http://localhost:5023", "endpoint": "/health"},
              "Model Training Service": {"url": "http://localhost:5021", "endpoint": "/health"},
              "Anomaly Detection Service": {"url": "http://localhost:5029", "endpoint": "/health"},
              "Anomaly Detector EEP": {"url": "http://localhost:5030", "endpoint": "/health"},
              "Predictor Service": {"url": "http://localhost:5100", "endpoint": "/health"}
            },
            "Chatbot Services": {
              "Embedding Service": {"url": "http://localhost:5201", "endpoint": "/health"},
              "Vector Search Service": {"url": "http://localhost:5202", "endpoint": "/health"},
              "LLM Generator Service": {"url": "http://localhost:5203", "endpoint": "/health"},
              "Chatbot Gateway": {"url": "http://localhost:5204", "endpoint": "/"}
            },
            "Monitoring": {
              "Monitoring Service": {"url": "http://localhost:3000", "endpoint": "/health"}
            }
          }
          SERVICES_EOF
          
          # Create the Python health check script
          cat << 'PYTHON_EOF' > health_check.py
          #!/usr/bin/env python3
          
          import requests
          import json
          import time
          import sys
          
          def check_service_health(category, service_name, service_info, timeout=5):
              """Check health of a specific service"""
              url = service_info["url"]
              endpoint = service_info.get("endpoint", "/health")
              full_url = f"{url}{endpoint}"
              
              result = {
                  "service": service_name,
                  "category": category,
                  "url": full_url,
                  "status": "unknown",
                  "response_time": None,
                  "details": {},
                  "error": None
              }
              
              try:
                  start_time = time.time()
                  response = requests.get(full_url, timeout=timeout)
                  end_time = time.time()
                  response_time = end_time - start_time
                  
                  result["response_time"] = response_time
                  
                  if response.status_code == 200:
                      try:
                          health_data = response.json()
                          result["details"] = health_data
                          
                          # Accept either "healthy" or "ok" as healthy status
                          status = health_data.get("status", "unknown")
                          if status in ["healthy", "ok"]:
                              result["status"] = "healthy"
                          else:
                              result["status"] = status
                              
                      except json.JSONDecodeError:
                          # For chatbot gateway, a 200 response is good enough
                          if service_name == "Chatbot Gateway":
                              result["status"] = "healthy"
                              result["details"] = {"message": "Gateway responded with 200 OK"}
                          else:
                              result["status"] = "invalid" 
                              result["error"] = "Invalid JSON response"
                  else:
                      result["status"] = "error"
                      result["error"] = f"HTTP Error: {response.status_code}"
              
              except requests.exceptions.ConnectTimeout:
                  result["status"] = "timeout"
                  result["error"] = "Connection timeout"
              except requests.exceptions.ConnectionError:
                  result["status"] = "unreachable"
                  result["error"] = "Connection refused"
              except Exception as e:
                  result["status"] = "error"
                  result["error"] = str(e)
              
              return result
          
          def main():
              # Load service configurations
              with open("services.json", "r") as f:
                  services = json.load(f)
              
              results = []
              
              # Skip explicitly disabled services
              disabled_services = ["Monitoring Service"]
              
              # Check all services
              for category, svcs in services.items():
                  for service_name, service_info in svcs.items():
                      # Skip disabled services
                      if service_name in disabled_services:
                          print(f"Skipping disabled service: {service_name}")
                          continue
                          
                      print(f"Checking {category} - {service_name}...")
                      result = check_service_health(category, service_name, service_info)
                      results.append(result)
                      
                      status_symbol = "✅" if result["status"] == "healthy" else "❌"
                      print(f"{status_symbol} {service_name}: {result['status']}")
                      if result["status"] != "healthy" and result["error"]:
                          print(f"   Error: {result['error']}")
              
              # Save results to file
              with open("health-results.json", "w") as f:
                  json.dump(results, f, indent=2)
              
              # Print summary
              healthy_count = sum(1 for r in results if r["status"] == "healthy")
              total_count = len(results)
              
              print(f"\nHealth Check Summary: {healthy_count}/{total_count} services healthy")
              
              if healthy_count < total_count:
                  print("\nUnhealthy services:")
                  for result in results:
                      if result["status"] != "healthy":
                          print(f"- {result['service']} ({result['category']}): {result['status']}")
                          if result["error"]:
                              print(f"  Error: {result['error']}")
              
              return 0 if healthy_count == total_count else 1
          
          if __name__ == "__main__":
              exit(main())
          PYTHON_EOF
          
          # Make the script executable
          chmod +x health_check.py
          
          # Install dependencies if needed
          if ! command -v python3 &> /dev/null; then
              echo "Python not found, installing..."
              sudo apt-get update
              sudo apt-get install -y python3 python3-pip
          fi
          
          if ! python3 -c "import requests" &> /dev/null; then
              echo "Installing Python requests library..."
              pip3 install requests
          fi
          
          # Run the health check
          python3 health_check.py
          
          # Return the exit code from the Python script
          exit $?
          EOF
          
          # Make the script executable
          chmod +x remote_health_check.sh
      
      - name: Run health check on remote server
        run: |
          # Copy the script to the server
          scp remote_health_check.sh azureuser@${{ secrets.SERVER_IP }}:~/remote_health_check.sh
          
          # Run the script on the server and capture output
          ssh azureuser@${{ secrets.SERVER_IP }} "bash ~/remote_health_check.sh" | tee health_check_output.log
          
          # Copy results back if they exist
          ssh azureuser@${{ secrets.SERVER_IP }} "if [ -f ~/health-results.json ]; then cat ~/health-results.json; fi" > health-results.json || echo "{}" > health-results.json
      
      - name: Upload health check results
        uses: actions/upload-artifact@v4
        with:
          name: health-check-results
          path: |
            health-results.json
            health_check_output.log
          retention-days: 5
      
      - name: Check for unhealthy services
        run: |
          # Parse results and determine if any services are unhealthy
          python -c "
          import json, sys;
          try:
              with open('health-results.json', 'r') as f:
                  results = json.load(f)
              
              # Count issues
              healthy = sum(1 for r in results if r['status'] == 'healthy')
              total = len(results)
              
              # Print summary for GitHub Actions log
              print(f'::group::Health Check Summary')
              print(f'Health status: {healthy}/{total} services healthy')
              
              # List unhealthy services
              unhealthy = [r for r in results if r['status'] != 'healthy']
              if unhealthy:
                  print('\\nUnhealthy services:')
                  for service in unhealthy:
                      print(f'- {service[\"service\"]} ({service[\"category\"]}): {service[\"status\"]}')
                      if service['error']:
                          print(f'  Error: {service[\"error\"]}')
              print('::endgroup::')
              
              # Exit with error code if any service is unhealthy
              if healthy < total:
                  print('\\n::error::Health check detected unhealthy services')
                  sys.exit(1)
          except Exception as e:
              print(f'::error::Error processing health check results: {str(e)}')
              sys.exit(1)
          "
      
      # Optional: Send notifications if there are unhealthy services
      - name: Send Slack notification on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "DeepMed Health Check Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*DeepMed Health Check Failed* in environment `${{ env.ENVIRONMENT }}`\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK 